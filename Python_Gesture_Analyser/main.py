import numpy as np
from typing import List
import os
from gesture import Gesture
import pandas as pd
import multiprocessing as mp
from joblib import Parallel, delayed

TOLERANCE = 10

def calc_euclidean_distance_point_wise(point_1: np.ndarray, point_2: np.ndarray):
    return np.linalg.norm(point_1 - point_2)

def calc_euclidean_distance_joint_wise(join_coordinate_list_1: List[np.ndarray], join_coordinate_list_2: List[np.ndarray]):
    point_sum = 0
    for point1, point2 in zip(join_coordinate_list_1, join_coordinate_list_2):
        point_sum += calc_euclidean_distance_point_wise(point1, point2)
    return point_sum / len(join_coordinate_list_1)

def calc_dtw_distance(gesture_1, gesture_2):
    rows, cols = (len(gesture_1), len(gesture_2))
    cost = np.zeros((rows, cols))
    cost[0][0] = calc_euclidean_distance_joint_wise(gesture_1[0][1], gesture_2[0][1])
    for p in range(1, len(gesture_2)):
        cost[0][p] = cost[0][p - 1] + calc_euclidean_distance_joint_wise(gesture_1[0][1], gesture_2[p][1])
    for q in range(1, len(gesture_1)):
        cost[q][0] = cost[q - 1][0] + calc_euclidean_distance_joint_wise(gesture_1[q][1], gesture_2[0][1])

    for r in range(1, len(gesture_1)):
        for s in range(1, len(gesture_2)):
            min_d = min(cost[r - 1][s - 1], min(cost[r - 1][s], cost[r][s - 1]))
            cost[r][s] = min_d + calc_euclidean_distance_joint_wise(gesture_1[r][1], gesture_2[s][1])

    return cost[rows - 1][cols - 1]

def calc_normalized_dtw_distance(gesture_1, gesture_2):
    rows, cols = (len(gesture_1), len(gesture_2))
    cost = np.zeros((rows, cols))
    length = np.zeros((rows, cols))
    cost[0][0] = calc_euclidean_distance_joint_wise(gesture_1[0][1], gesture_2[0][1])
    for p in range(1, len(gesture_2)):
        cost[0][p] = cost[0][p - 1] + calc_euclidean_distance_joint_wise(gesture_1[0][1], gesture_2[p][1])
        length[0][p] = length[0][p - 1] + 1
    for q in range(1, len(gesture_1)):
        cost[q][0] = cost[q - 1][0] + calc_euclidean_distance_joint_wise(gesture_1[q][1], gesture_2[0][1])
        length[q][0] = length[q - 1][0] + 1

    for r in range(1, len(gesture_1)):
        for s in range(1, len(gesture_2)):
            min_d = cost[r - 1][s - 1]
            l = length[r - 1][s - 1]
            if min_d > cost[r - 1][s]:
                min_d, l = cost[r - 1][s], length[r - 1][s]
            if min_d > cost[r][s - 1]:
                min_d, l = cost[r][s - 1], length[r][s - 1]

            cost[r][s] = min_d + calc_euclidean_distance_joint_wise(gesture_1[r][1], gesture_2[s][1])
            length[r][s] = l + 1

    return cost[rows - 1, cols - 1] / length[rows - 1][cols - 1]

def calc_new_val_with_tolerance(dtw_val, row_count):
    return 0

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    dirs = {
        "D:\\Programming\\Projects\\Summer\\WEB\\Gesture-Capture-and-Analysis\\results\\mediapipe\\vivek-zoom\\",
        "D:\\Programming\\Projects\\Summer\\WEB\\Gesture-Capture-and-Analysis\\results\\mediapipe\\vivek-pan\\",
        "D:\\Programming\\Projects\\Summer\\WEB\\Gesture-Capture-and-Analysis\\results\\mediapipe\\vivek-rotate\\",
        "D:\\Programming\\Projects\\Summer\\WEB\\Gesture-Capture-and-Analysis\\results\\mediapipe\\vivek-highlight\\"
    }
    gesture_collection = {}
    for dir in dirs:
        files = [dir + name for name in os.listdir(dir) if os.path.isfile(dir + name)]
        files.sort(key=lambda name: name[name.rindex('#') + 1:])
        for i in range(0, len(files), 2):
            filename = files[i] if os.path.getsize(files[i]) > os.path.getsize(files[i + 1]) else files[i + 1]
            f_obj = open(filename)
            key = filename[filename.find('_') + 1:]  # filename[filename.find('_') + 1: filename.rindex('#')]
            if key in gesture_collection:
                gesture_collection[key].append(Gesture(f_obj.read()).get_parsed_data())
            else:
                gesture_collection[key] = [Gesture(f_obj.read()).get_parsed_data()]
            f_obj.close()

    # num_cores = mp.cpu_count()
    # # Calculate similarity in Parallel using dynamic time wrapping
    # dtw_per = Parallel(n_jobs=num_cores)\
    #     (delayed(calc_dtw_distance)
    #      (l_gesture_value[0], r_gesture_value[0])
    #      for r_gesture_value in gesture_collection.values()
    #      for l_gesture_value in gesture_collection.values())
    #
    # print(dtw_per)
    # # Calculate similarity in Parallel using normalized dynamic time wrapping
    # dtw_per_norm = Parallel(n_jobs=num_cores)\
    #     (delayed(calc_normalized_dtw_distance)
    #      (l_gesture_value[0], r_gesture_value[0])
    #      for r_gesture_value in gesture_collection.values()
    #      for l_gesture_value in gesture_collection.values())
    #
    # print(dtw_per_norm)
    dtw_per = [0.0, 4.782965633075516, 32.91560533055611, 34.13572919937713, 9.20835457848208, 10.35722039613745, 31.396315403423337, 29.414210993517795, 12.582821743728188, 32.570161912806604, 36.08682031168897, 12.76612923812825, 15.666285505582263, 28.88401770689376, 29.44724547104531, 17.536080570040355, 4.782965633075516, 0.0, 33.20144630952712, 35.52400772057301, 10.006049246826962, 11.28755024144056, 32.99961226733839, 31.04758959110142, 12.495785982548018, 33.307856539861774, 35.46101221738243, 10.919196152523922, 16.988217778406465, 30.44978667536675, 31.35029166120714, 16.686504441025857, 32.91560533055611, 33.20144630952712, 0.0, 8.342793639376303, 34.01936665748488, 31.352181082975676, 14.516934723351696, 15.105287960990358, 39.176878071092794, 12.217096173924087, 12.447726831261138, 39.971772983019044, 37.491496523433, 13.234858157653399, 13.255961276891703, 35.05860483992848, 34.13572919937713, 35.52400772057301, 8.342793639376303, 0.0, 30.012531383092195, 27.959704553931182, 10.39748798813416, 12.300358820821359, 43.12335020154968, 9.735851417252114, 13.512578948147182, 42.66400419565607, 34.73892653765386, 11.711511588940631, 12.33613789068262, 38.31848185243077, 9.20835457848208, 10.006049246826962, 34.01936665748488, 30.012531383092195, 0.0, 2.0514038495054487, 21.169378441783273, 23.61847745463028, 8.44767654947466, 29.799754814353147, 33.738323246364445, 10.629420132609626, 10.116834501474719, 23.500248958858926, 25.83976064716373, 13.950555831169808, 10.35722039613745, 11.28755024144056, 31.352181082975676, 27.959704553931182, 2.0514038495054487, 0.0, 20.20113723901181, 21.453829380798442, 11.037485989829383, 27.535260416942197, 30.968438850419435, 12.949301121190047, 10.609428603748771, 21.53680732201324, 23.625930988132673, 13.873793864588624, 31.396315403423337, 32.99961226733839, 14.516934723351696, 10.39748798813416, 21.169378441783273, 20.20113723901181, 0.0, 2.608230501626503, 38.57141110995606, 6.379611924490715, 10.119094788524128, 38.28092163709984, 28.640212531979856, 9.71475480294429, 9.133335398691216, 32.85127682945457, 29.414210993517795, 31.04758959110142, 15.105287960990358, 12.300358820821359, 23.61847745463028, 21.453829380798442, 2.608230501626503, 0.0, 35.772377139008974, 7.081435241970089, 9.688195865662024, 35.85733179563903, 26.490053130661437, 9.054161854245203, 9.14571623293334, 30.41473663739367, 12.582821743728188, 12.495785982548018, 39.176878071092794, 43.12335020154968, 8.44767654947466, 11.037485989829383, 38.57141110995606, 35.772377139008974, 0.0, 37.19339157686771, 38.435044403793086, 5.051300794305861, 12.800668757447875, 34.2505180579385, 35.43667119202348, 16.235591255621223, 32.570161912806604, 33.307856539861774, 12.217096173924087, 9.735851417252114, 29.799754814353147, 27.535260416942197, 6.379611924490715, 7.081435241970089, 37.19339157686771, 0.0, 6.2881382232908525, 36.87866424759389, 32.29592474269861, 9.486548851122548, 10.443368587348393, 33.085447068730545, 36.08682031168897, 35.46101221738243, 12.447726831261138, 13.512578948147182, 33.738323246364445, 30.968438850419435, 10.119094788524128, 9.688195865662024, 38.435044403793086, 6.2881382232908525, 0.0, 39.16939809426188, 35.76112353111451, 12.246351550421426, 13.823581296266106, 33.944415581286236, 12.76612923812825, 10.919196152523922, 39.971772983019044, 42.66400419565607, 10.629420132609626, 12.949301121190047, 38.28092163709984, 35.85733179563903, 5.051300794305861, 36.87866424759389, 39.16939809426188, 0.0, 14.48487317493355, 34.67364975868048, 36.063560483519616, 16.68324637573397, 15.666285505582263, 16.988217778406465, 37.491496523433, 34.73892653765386, 10.116834501474719, 10.609428603748771, 28.640212531979856, 26.490053130661437, 12.800668757447875, 32.29592474269861, 35.76112353111451, 14.48487317493355, 0.0, 26.982001176797233, 29.193537608376776, 6.6540507539259055, 28.88401770689376, 30.44978667536675, 13.234858157653399, 11.711511588940631, 23.500248958858926, 21.53680732201324, 9.71475480294429, 9.054161854245203, 34.2505180579385, 9.486548851122548, 12.246351550421426, 34.67364975868048, 26.982001176797233, 0.0, 5.846583739227371, 30.17511015485286, 29.44724547104531, 31.35029166120714, 13.255961276891703, 12.33613789068262, 25.83976064716373, 23.625930988132673, 9.133335398691216, 9.14571623293334, 35.43667119202348, 10.443368587348393, 13.823581296266106, 36.063560483519616, 29.193537608376776, 5.846583739227371, 0.0, 31.17729203464052, 17.536080570040355, 16.686504441025857, 35.05860483992848, 38.31848185243077, 13.950555831169808, 13.873793864588624, 32.85127682945457, 30.41473663739367, 16.235591255621223, 33.085447068730545, 33.944415581286236, 16.68324637573397, 6.6540507539259055, 30.17511015485286, 31.17729203464052, 0.0]
    dtw_per_norm = [0.0, 0.04555205364833825, 0.32915605330556114, 0.40159681411031917, 0.12582821743728187, 0.35791386717369894, 0.3341372251082312, 0.1372702068615941, 0.10833358327625976, 0.12184965171926411, 0.3693684165108628, 0.34604954110020936, 0.18430924124214426, 0.33981197302227956, 0.34643818201229776, 0.178939597653473, 0.04555205364833825, 0.0, 0.3320144630952712, 0.41306985721596523, 0.12495785982548017, 0.3660204015369426, 0.328342705716504, 0.116161661197063, 0.11634940984682514, 0.1312505842027972, 0.3837164217132371, 0.36101848361745836, 0.182669008369962, 0.35406728692286915, 0.3645382751303156, 0.15741985321722507, 0.32915605330556114, 0.3320144630952712, 0.0, 0.08021916960938753, 0.39176878071092797, 0.12217096173924087, 0.11316115301146489, 0.39971772983019044, 0.3401936665748488, 0.3135218108297568, 0.14516934723351696, 0.15105287960990357, 0.37491496523433, 0.12975351134954313, 0.13255961276891703, 0.35058604839928476, 0.40159681411031917, 0.41306985721596523, 0.08021916960938753, 0.0, 0.43123350201549676, 0.10698737821156169, 0.12511647174210352, 0.4587527332866244, 0.4055747484201648, 0.37783384532339437, 0.1405065944342454, 0.15570074456735897, 0.4397332473120742, 0.1232790693572698, 0.14018338512139342, 0.3910049168615385, 0.12582821743728187, 0.12495785982548017, 0.39176878071092797, 0.43123350201549676, 0.0, 0.3719339157686771, 0.3558800407758619, 0.046342209122072126, 0.08447676549474661, 0.11037485989829383, 0.3857141110995606, 0.35772377139008976, 0.12800668757447875, 0.342505180579385, 0.35436671192023483, 0.15032954866315948, 0.35791386717369894, 0.3660204015369426, 0.12217096173924087, 0.10698737821156169, 0.3719339157686771, 0.0, 0.055159107221849586, 0.39654477685584827, 0.32746983312475986, 0.3025852793070571, 0.06859797768269586, 0.07454142359968514, 0.35490027189778695, 0.10424778957277525, 0.1122942858854666, 0.33760660274214843, 0.3341372251082312, 0.328342705716504, 0.11316115301146489, 0.12511647174210352, 0.3558800407758619, 0.055159107221849586, 0.0, 0.3626796119839063, 0.3123918819107819, 0.2867448041705503, 0.09369532211596415, 0.08888253087763325, 0.33112151417698615, 0.11339214398538358, 0.12799612311357506, 0.31430014427116887, 0.1372702068615941, 0.116161661197063, 0.39971772983019044, 0.4587527332866244, 0.046342209122072126, 0.39654477685584827, 0.3626796119839063, 0.0, 0.11429484013558738, 0.1392397970020435, 0.4116228133021488, 0.38556270747998955, 0.15575132446165108, 0.37283494364172565, 0.3877802202528991, 0.15447450347901823, 0.10833358327625976, 0.11634940984682514, 0.3401936665748488, 0.4055747484201648, 0.08447676549474661, 0.32746983312475986, 0.3123918819107819, 0.11429484013558738, 0.0, 0.0306179679030664, 0.33077153815286364, 0.2989680690459529, 0.12806119622119896, 0.3051980384267393, 0.3076161981805206, 0.1423526105221409, 0.12184965171926411, 0.1312505842027972, 0.3135218108297568, 0.37783384532339437, 0.11037485989829383, 0.3025852793070571, 0.2867448041705503, 0.1392397970020435, 0.0306179679030664, 0.0, 0.30150951103002704, 0.271567460516436, 0.13429656460441483, 0.27969879638978234, 0.2812610831920556, 0.1415693251488635, 0.3693684165108628, 0.3837164217132371, 0.14516934723351696, 0.1405065944342454, 0.3857141110995606, 0.06859797768269586, 0.09369532211596415, 0.4116228133021488, 0.33077153815286364, 0.30150951103002704, 0.0, 0.03301557596995573, 0.3625343358478463, 0.1199352444807937, 0.10873018331775257, 0.3352171105046385, 0.34604954110020936, 0.36101848361745836, 0.15105287960990357, 0.15570074456735897, 0.35772377139008976, 0.07454142359968514, 0.08888253087763325, 0.38556270747998955, 0.2989680690459529, 0.271567460516436, 0.03301557596995573, 0.0, 0.33531712823622073, 0.10651955122641416, 0.10050237618608067, 0.31035445548360885, 0.18430924124214426, 0.182669008369962, 0.37491496523433, 0.4397332473120742, 0.12800668757447875, 0.35490027189778695, 0.33112151417698615, 0.15575132446165108, 0.12806119622119896, 0.13429656460441483, 0.3625343358478463, 0.33531712823622073, 0.0, 0.3415443186936359, 0.3475421143854378, 0.06789847708087658, 0.33981197302227956, 0.35406728692286915, 0.12975351134954313, 0.1232790693572698, 0.342505180579385, 0.10424778957277525, 0.11339214398538358, 0.37283494364172565, 0.3051980384267393, 0.27969879638978234, 0.1199352444807937, 0.10651955122641416, 0.3415443186936359, 0.0, 0.06286649181964915, 0.3079092872944169, 0.34643818201229776, 0.3645382751303156, 0.13255961276891703, 0.14018338512139342, 0.35436671192023483, 0.1122942858854666, 0.12799612311357506, 0.3877802202528991, 0.3076161981805206, 0.2812610831920556, 0.10873018331775257, 0.10050237618608067, 0.3475421143854378, 0.06286649181964915, 0.0, 0.3181356330065359, 0.178939597653473, 0.15741985321722507, 0.35058604839928476, 0.3910049168615385, 0.15032954866315948, 0.33760660274214843, 0.31430014427116887, 0.15447450347901823, 0.1423526105221409, 0.1415693251488635, 0.3352171105046385, 0.31035445548360885, 0.06789847708087658, 0.3079092872944169, 0.3181356330065359, 0.0]
    first_two_cols = [[l_key, r_key] for l_key in gesture_collection.keys() for r_key in gesture_collection.keys()]
    tbl_data = [(item1[0], item1[1], item2) for item1, item2 in zip(first_two_cols, dtw_per)]
    tbl_data_norm = [(item1[0], item1[1], item2) for item1, item2 in zip(first_two_cols, dtw_per_norm)]

    df = pd.DataFrame(tbl_data, columns=['Left_Gesture', 'Right_Gesture', 'Similarity'])
    tol_count = sum(df['Similarity'] <= TOLERANCE)
    print(tol_count)
    result = (tol_count / ((len(dtw_per) * (len(dtw_per) - 1)) / 2)) * 100

    df_norm = pd.DataFrame(tbl_data_norm, columns=['Left_Gesture', 'Right_Gesture', 'Similarity'])
    tol_count_norm = sum(df_norm['Similarity'] <= (TOLERANCE / 100))
    print(tol_count_norm)
    result_norm = (tol_count_norm / ((len(dtw_per_norm) * (len(dtw_per_norm) - 1)) / 2)) * 100

    pd.set_option('display.width', 320)
    pd.set_option('display.max_columns', 5)
    pd.set_option('display.min_rows', 20)
    print(df)
    print(f"Result with Tolerance ({TOLERANCE}) and matrix [{len(dtw_per)}*{len(dtw_per)}]: {result}%")
    print(df_norm)
    print(f"Result with Tolerance ({TOLERANCE}) and matrix [{len(dtw_per_norm)}*{len(dtw_per_norm)}]: {result_norm}%")
